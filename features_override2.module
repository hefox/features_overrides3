<?php

define('FEATURES_OVERRIDE_HOOK', 'features_override_default');

/**
 * Key to use when marking properties for recursion.
 */
define('FEATURES_OVERRIDE_RECURSION_MARKER', 'features_override_recursion_marker');

/**
 * Implements hook_features_api().
 */
function features_override2_features_api() {
  return array(
    'features_override2' => array(
      'name' => t('Feature Overrides'),
      'feature_source' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function features_override2_menu() {
  $items = array();
  $items['admin/structure/features/%feature/override'] = array(
    'title' => 'Overrides',
    'description' => 'Show override details.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('features_override2_form', 3),
    'load arguments' => array(3, TRUE),
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_TASK,
    'file' => "features_override2.admin.inc",
    'weight' => 10,
  );
  $items['admin/structure/features/overrides'] = array(
    'title' => 'Overrides',
    'description' => 'Display override details.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('features_override2_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_TASK,
    'file' => "features_override2.admin.inc",
    'weight' => 9,
  );

  return $items;
}

/**
 * Implements hook_features_export_options().
 */
function features_override2_features_export_options() {
  $options = array();
  // now look for any new overrides
  foreach (features_override2_get_overrides() as $component => $element) {
    foreach ($element as $key => $value) {
      $identifier = "{$component}.{$key}";
      $options[$identifier] = $identifier;
    }
  }
  return $options;
}

/**
 * Implements hook_features_export().
 */
function features_override2_features_export($data, &$export, $module_name = '') {
  // logic copied from Field exportable
  $map = features_get_default_map('features_override2');

  // The field_default_fields() hook integration is provided by the
  // features module so we need to add it as a dependency.
  $export['dependencies']['features'] = 'features';
  $export['dependencies']['features_override2'] = 'features_override2';

  foreach ($data as $identifier) {
    // If this override bundle is already provided by another module, remove the field
    // and add the other module as a dependency.
    if (isset($map[$identifier]) && $map[$identifier] != $module_name) {
      if (isset($export['features']['features_override2'][$identifier])) {
        unset($export['features']['features_override2'][$identifier]);
      }
      $module = $map[$identifier];
      $export['dependencies'][$module] = $module;
    }
    // If the field has not yet been exported, add it
    else {
      $export['features']['features_override2'][$identifier] = $identifier;
    }
  }
}

/**
 * Implements hook_features_export_render().
 */
function features_override2_features_export_render($module, $data, $export = NULL) {
  $info = features_get_components();
  foreach ($data as $identifier) {
    list($component, $element) = explode('.', $identifier);
    if (($differences = features_override2_get_overrides($component, $element)) && !empty($info[$component]['default_hook'])) {
      // Add in an alter function.
      $alter_code = array();
      $alter_code[] = '  if (!empty($data["' . $element . '"])) {';
      foreach (features_override_render_override($differences, is_array($differences)) as $code) {
        $alter_code[] = '    $data["' . $element . '"]' . $code . ';';
      }
      $alter_code[] = '  }';
      $list[$info[$component]['default_hook'] . '_alter'] = array('code' => implode("\n", $alter_code), 'args' => '&$data');
    }
  }
  return $list;
}

function features_override_render_override($differences, $parent_type) {
  $code = array();
  foreach ($differences as $key => $value) {
    if (is_array($value) && !empty($value['features_override_difference_root'])) {
      $code[] = _features_override_key($parent_type, $key) . ' = ' . features_var_export($value['difference']);
    }
    else {
      $return = features_override_render_override($value, is_array($value));
      $return = is_array($return) ? $return : array($return);
      foreach ($return as $val) {
        $code[] = _features_override_key($parent_type, $key) . $val;
      }
    }
  }
  return $code;
}

function _features_override_key($parent_type, $key) {
  return ($parent_type ? '["' . $key . '"]' : '->' . $key);
}

/**
 * Implements hook_features_revert().
 */
function features_override2_features_revert($module) {
  features_override2_features_rebuild($module);
}

/**
 * Implements of hook_features_rebuild().
 *
 * Rebuilds fields from code defaults.
 */
function features_override2_features_rebuild($module) {
  // rebuild parent modules we are overriding

  // first build list of components we are overriding
  $parents = array();
  $data = features_get_component_map();
  foreach ($data['features_override2'] as $identifier => $component_modules) {
    list($component, $element) = explode('.', $identifier);
    if (isset($data[$component][$element])) {
      foreach ($data[$component][$element] as $module) {
        $parents[$module][$component] = $component;
      }
    }
  }
  // first, update get_default cache so rebuild will work on latest data
  foreach ($parents as $module => $element) {
    foreach ($element as $component) {
      features_get_default($component, $module, TRUE, TRUE);
    }
  }
  // rebuild those parent components
  features_rebuild($parents);
}

/**
 * Implements hook_modules_enabled().
 *
 * Revert the parent settings when the override module is enabled
 */
function features_override2_modules_enabled($modules) {
  foreach ($modules as $module) {
    if (function_exists( $module . '_' . FEATURES_OVERRIDE_HOOK)) {
      features_override2_features_rebuild($module);
    }
  }
}

function features_override2_get_overrides($component_type = FALSE, $component_key = FALSE, $reset = FALSE) {
  static $cache;
  if (!isset($cache) || $reset) {
     $cache = array();
    foreach (features_get_components() as $component => $info) {
      if (empty($info['default_hook']) || $component == 'features_override2') {
        continue;
      }
      $modules = array();
      foreach (features_get_component_map($component) as $component_modules) {
        foreach ($component_modules as $module) {
          $modules = array_merge($component_modules, $modules);
        }
      }

      foreach (array_intersect(array_unique($modules), module_list()) as $module) {
        if ($differences = features_override_component_module($component, $module)) {
          $cache = array_merge($differences, $cache);
        }
      }
    }
  }

  if ($component_type && $component_key) {
    return !empty($cache[$component_type][$component_key]) ? $cache[$component_type][$component_key] : array();
  }
  elseif ($component_type) {
    return !empty($cache[$component_type]) ? $cache[$component_type] : array();
  }
  return $cache;
}

function features_override_component_module($component, $module) {
  module_load_include('export.inc', 'features');
  $differences = array();
  $default = features_get_default($component, $module, FALSE, TRUE);
  $normal = features_get_normal($component, $module);
  if ($default && $normal) {
    $ignore = features_override2_features_override_ignore($component);
    foreach ($normal as $key => $object) {
      _features_override_set_value($default[$key], 'features_override_recursive', 1);
      _features_override_set_value($object, 'features_override_recursive', 1);
      $diff = features_override2_compare($default[$key], $object, $ignore);
      if ($diff !== NULL) {
        $differences[$component][$key] = $diff;
      }
    }
  }
  return $differences;
}

function features_override2_compare($default, $normal, $ignore) {
  static $i;
  $array = is_array($default);
  $differences = $array ? array() : new stdClass();
  $return = FALSE;
  foreach ($default as $default_key => $default_value) {
    if ($ignore && in_array($default_key, $ignore)) {
      continue;
    }
    $value = $array ? (isset($normal[$default_key]) ? $normal[$default_key] : NULL) : (isset($normal->$default_key) ? $normal->$default_key : NULL) ;
    if ($value !== $default_value) {
      // Recurse down where relavent
      if ((is_array($value) && is_array($default_value) && !empty($value)) || (is_object($value) && !empty($value) && is_object($default_value)) && empty($value->features_override_recursive)) {
        $value_difference = features_override2_compare($default_value, $value, $ignore);
        if ($value_difference === NULL) {
          continue;
        }
        _features_override_set_value($default_value, 'features_override_recursive', 1);
        _features_override_set_value($value, 'features_override_recursive', 1);
      }
      else {
        $value_difference = array('features_override_difference_root' => 1, 'difference' => $value);
      }
      _features_override_set_value($differences, $default_key, $value_difference);
      $return = TRUE;
    }
  }
  return $return ? $differences : NULL;
}

function _features_override_set_value(&$item, $key, $value) {
  if (is_array($item)) {
    $item[$key] = $value;
  }
  elseif (is_object($item)) {
    $item->$key = $value;
  }
}

function features_override2_features_override_ignore($component) {
  // determine which keys need to be ignored for override diff for various components
  $ignores = array();
  switch ($component) {
    case 'views_view':
      $ignores[] = 'display_handler';
      $ignores[] = 'handler';
      $ignores[] = 'localization_plugin';
      break;
    case 'user_permission':
      $ignores[] = 'module';
      break;
  }
  return $ignores;
}
